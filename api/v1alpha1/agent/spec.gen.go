// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"WRv4+5v7/xcAAP//Qykdm9mmAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

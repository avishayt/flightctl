// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

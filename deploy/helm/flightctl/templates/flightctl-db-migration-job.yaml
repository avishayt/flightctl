apiVersion: batch/v1
kind: Job
metadata:
  name: flightctl-db-migration-{{ .Release.Revision }}
  namespace: {{ default .Release.Namespace .Values.global.internalNamespace }}
  labels:
    app: flightctl-db-migration
    release: {{ .Release.Name }}
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "10"
    helm.sh/hook-delete-policy: hook-succeeded
spec:
  template:
    metadata:
      labels:
        app: flightctl-db-migration
        release: {{ .Release.Name }}
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: setup-database-users
        image: localhost/flightctl-db-setup:latest
        imagePullPolicy: {{ default .Values.global.imagePullPolicy .Values.api.image.pullPolicy }}
        env:
        - name: DB_HOST
          value: "flightctl-db.{{ default .Release.Namespace .Values.global.internalNamespace }}.svc.cluster.local"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: "flightctl"
        - name: DB_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: flightctl-db-secret
              key: masterUser
        - name: DB_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: flightctl-db-secret
              key: masterPassword
        - name: DB_MIGRATION_USER
          valueFrom:
            secretKeyRef:
              name: flightctl-db-secret
              key: migrationUser
        - name: DB_MIGRATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: flightctl-db-secret
              key: migrationPassword
        - name: DB_APP_USER
          valueFrom:
            secretKeyRef:
              name: flightctl-db-secret
              key: user
        - name: DB_APP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: flightctl-db-secret
              key: userPassword
        command:
        - /bin/bash
        - -c
        - |
          set -eo pipefail

          # Wait for database to be ready
          echo "Waiting for database to be ready..."
          until PGPASSWORD="$DB_ADMIN_PASSWORD" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_ADMIN_USER" -d "$DB_NAME" -c "SELECT 1" >/dev/null 2>&1; do
            echo "Database not ready, waiting..."
            sleep 5
          done

          echo "Database is ready. Setting up users..."

          # Create temporary SQL file with environment variable substitution
          export DB_HOST DB_PORT DB_NAME DB_ADMIN_USER DB_ADMIN_PASSWORD
          export DB_MIGRATION_USER DB_MIGRATION_PASSWORD DB_APP_USER DB_APP_PASSWORD

          SQL_FILE="/tmp/setup_database_users.sql"
          envsubst < ./deploy/scripts/setup_database_users.sql > "$SQL_FILE"

          # Execute the SQL file
          echo "Running database user setup SQL..."
          PGPASSWORD="$DB_ADMIN_PASSWORD" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_ADMIN_USER" -d "$DB_NAME" -f "$SQL_FILE"

          # Clean up temporary file
          rm -f "$SQL_FILE"

          echo "Database users setup completed successfully!"
      containers:
      - name: run-migrations
        image: localhost/flightctl-db-setup:latest
        imagePullPolicy: {{ default .Values.global.imagePullPolicy .Values.api.image.pullPolicy }}
        env:
        - name: HOME
          value: "/root"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: flightctl-db-secret
              key: migrationUser
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: flightctl-db-secret
              key: migrationPassword
        - name: DB_MIGRATION_USER
          valueFrom:
            secretKeyRef:
              name: flightctl-db-secret
              key: migrationUser
        - name: DB_MIGRATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: flightctl-db-secret
              key: migrationPassword
        - name: DB_APP_USER
          valueFrom:
            secretKeyRef:
              name: flightctl-db-secret
              key: user
        - name: DB_APP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: flightctl-db-secret
              key: userPassword
        command:
        - /bin/bash
        - -c
        - |
          set -eo pipefail
          echo "Running database migrations..."

          # Copy config file to a writable location
          mkdir -p /tmp/.flightctl
          cp /root/.flightctl/config.yaml /tmp/.flightctl/config.yaml
          export HOME=/tmp

          /usr/local/bin/flightctl-db-migrate
          echo "Migrations completed successfully!"

          # Grant permissions on all tables to application user (fallback)
          echo "Granting permissions on all tables to application user..."
          export PGPASSWORD="$DB_MIGRATION_PASSWORD"
          psql -h "flightctl-db.{{ default .Release.Namespace .Values.global.internalNamespace }}.svc.cluster.local" -p "5432" -U "$DB_MIGRATION_USER" -d "flightctl" -c "SELECT grant_app_permissions_on_existing_tables();"
          echo "Post-migration permissions granted successfully!"
        volumeMounts:
        - mountPath: /root/.flightctl/
          name: flightctl-db-migration-config
          readOnly: true
      volumes:
      - name: flightctl-db-migration-config
        configMap:
          name: flightctl-db-migration-config

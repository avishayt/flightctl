// Code generated by api-metadata-extractor. DO NOT EDIT.

package server

import (
	"net/http"

	"github.com/go-chi/chi/v5"
)

// EndpointMetadata contains metadata for an API endpoint
type EndpointMetadata struct {
	OperationID string
	Resource    string
	Action      string
}


// APIMetadataMap provides O(1) lookup for endpoint metadata using pattern+method as key
var APIMetadataMap = map[string]EndpointMetadata{
	"GET:/api/v1/auth/config": {
		OperationID: "authConfig",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/auth/validate": {
		OperationID: "authValidate",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/certificatesigningrequests": {
		OperationID: "listCertificateSigningRequests",
		Resource:    "",
		Action:      "",
	},
	"POST:/api/v1/certificatesigningrequests": {
		OperationID: "createCertificateSigningRequest",
		Resource:    "",
		Action:      "",
	},
	"DELETE:/api/v1/certificatesigningrequests/{name}": {
		OperationID: "deleteCertificateSigningRequest",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/certificatesigningrequests/{name}": {
		OperationID: "getCertificateSigningRequest",
		Resource:    "",
		Action:      "",
	},
	"PATCH:/api/v1/certificatesigningrequests/{name}": {
		OperationID: "patchCertificateSigningRequest",
		Resource:    "",
		Action:      "",
	},
	"PUT:/api/v1/certificatesigningrequests/{name}": {
		OperationID: "replaceCertificateSigningRequest",
		Resource:    "",
		Action:      "",
	},
	"PUT:/api/v1/certificatesigningrequests/{name}/approval": {
		OperationID: "updateCertificateSigningRequestApproval",
		Resource:    "",
		Action:      "",
	},
	"POST:/api/v1/deviceactions/resume": {
		OperationID: "resumeDevices",
		Resource:    "devices/resume",
		Action:      "update",
	},
	"GET:/api/v1/devices": {
		OperationID: "listDevices",
		Resource:    "",
		Action:      "",
	},
	"POST:/api/v1/devices": {
		OperationID: "createDevice",
		Resource:    "",
		Action:      "",
	},
	"DELETE:/api/v1/devices/{name}": {
		OperationID: "deleteDevice",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/devices/{name}": {
		OperationID: "getDevice",
		Resource:    "",
		Action:      "",
	},
	"PATCH:/api/v1/devices/{name}": {
		OperationID: "patchDevice",
		Resource:    "",
		Action:      "",
	},
	"PUT:/api/v1/devices/{name}": {
		OperationID: "replaceDevice",
		Resource:    "",
		Action:      "",
	},
	"PUT:/api/v1/devices/{name}/decommission": {
		OperationID: "decommissionDevice",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/devices/{name}/lastseen": {
		OperationID: "getDeviceLastSeen",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/devices/{name}/rendered": {
		OperationID: "getRenderedDevice",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/devices/{name}/status": {
		OperationID: "getDeviceStatus",
		Resource:    "",
		Action:      "",
	},
	"PATCH:/api/v1/devices/{name}/status": {
		OperationID: "patchDeviceStatus",
		Resource:    "",
		Action:      "",
	},
	"PUT:/api/v1/devices/{name}/status": {
		OperationID: "replaceDeviceStatus",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/enrollmentconfig": {
		OperationID: "getEnrollmentConfig",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/enrollmentrequests": {
		OperationID: "listEnrollmentRequests",
		Resource:    "",
		Action:      "",
	},
	"POST:/api/v1/enrollmentrequests": {
		OperationID: "createEnrollmentRequest",
		Resource:    "",
		Action:      "",
	},
	"DELETE:/api/v1/enrollmentrequests/{name}": {
		OperationID: "deleteEnrollmentRequest",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/enrollmentrequests/{name}": {
		OperationID: "getEnrollmentRequest",
		Resource:    "",
		Action:      "",
	},
	"PATCH:/api/v1/enrollmentrequests/{name}": {
		OperationID: "patchEnrollmentRequest",
		Resource:    "",
		Action:      "",
	},
	"PUT:/api/v1/enrollmentrequests/{name}": {
		OperationID: "replaceEnrollmentRequest",
		Resource:    "",
		Action:      "",
	},
	"PUT:/api/v1/enrollmentrequests/{name}/approval": {
		OperationID: "approveEnrollmentRequest",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/enrollmentrequests/{name}/status": {
		OperationID: "getEnrollmentRequestStatus",
		Resource:    "",
		Action:      "",
	},
	"PATCH:/api/v1/enrollmentrequests/{name}/status": {
		OperationID: "patchEnrollmentRequestStatus",
		Resource:    "",
		Action:      "",
	},
	"PUT:/api/v1/enrollmentrequests/{name}/status": {
		OperationID: "replaceEnrollmentRequestStatus",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/events": {
		OperationID: "listEvents",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/fleets": {
		OperationID: "listFleets",
		Resource:    "",
		Action:      "",
	},
	"POST:/api/v1/fleets": {
		OperationID: "createFleet",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/fleets/{fleet}/templateversions": {
		OperationID: "listTemplateVersions",
		Resource:    "",
		Action:      "",
	},
	"DELETE:/api/v1/fleets/{fleet}/templateversions/{name}": {
		OperationID: "deleteTemplateVersion",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/fleets/{fleet}/templateversions/{name}": {
		OperationID: "getTemplateVersion",
		Resource:    "",
		Action:      "",
	},
	"DELETE:/api/v1/fleets/{name}": {
		OperationID: "deleteFleet",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/fleets/{name}": {
		OperationID: "getFleet",
		Resource:    "",
		Action:      "",
	},
	"PATCH:/api/v1/fleets/{name}": {
		OperationID: "patchFleet",
		Resource:    "",
		Action:      "",
	},
	"PUT:/api/v1/fleets/{name}": {
		OperationID: "replaceFleet",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/fleets/{name}/status": {
		OperationID: "getFleetStatus",
		Resource:    "",
		Action:      "",
	},
	"PATCH:/api/v1/fleets/{name}/status": {
		OperationID: "patchFleetStatus",
		Resource:    "",
		Action:      "",
	},
	"PUT:/api/v1/fleets/{name}/status": {
		OperationID: "replaceFleetStatus",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/labels": {
		OperationID: "listLabels",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/organizations": {
		OperationID: "listOrganizations",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/repositories": {
		OperationID: "listRepositories",
		Resource:    "",
		Action:      "",
	},
	"POST:/api/v1/repositories": {
		OperationID: "createRepository",
		Resource:    "",
		Action:      "",
	},
	"DELETE:/api/v1/repositories/{name}": {
		OperationID: "deleteRepository",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/repositories/{name}": {
		OperationID: "getRepository",
		Resource:    "",
		Action:      "",
	},
	"PATCH:/api/v1/repositories/{name}": {
		OperationID: "patchRepository",
		Resource:    "",
		Action:      "",
	},
	"PUT:/api/v1/repositories/{name}": {
		OperationID: "replaceRepository",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/resourcesyncs": {
		OperationID: "listResourceSyncs",
		Resource:    "",
		Action:      "",
	},
	"POST:/api/v1/resourcesyncs": {
		OperationID: "createResourceSync",
		Resource:    "",
		Action:      "",
	},
	"DELETE:/api/v1/resourcesyncs/{name}": {
		OperationID: "deleteResourceSync",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/v1/resourcesyncs/{name}": {
		OperationID: "getResourceSync",
		Resource:    "",
		Action:      "",
	},
	"PATCH:/api/v1/resourcesyncs/{name}": {
		OperationID: "patchResourceSync",
		Resource:    "",
		Action:      "",
	},
	"PUT:/api/v1/resourcesyncs/{name}": {
		OperationID: "replaceResourceSync",
		Resource:    "",
		Action:      "",
	},
	"GET:/api/version": {
		OperationID: "getVersion",
		Resource:    "",
		Action:      "",
	},
}

// GetEndpointMetadata returns metadata for a given request using the existing Chi router context
func GetEndpointMetadata(r *http.Request) (*EndpointMetadata, bool) {
	// Get the route context from the existing Chi router that already processed this request
	rctx := chi.RouteContext(r.Context())
	if rctx == nil {
		return nil, false
	}
	
	// Get the route pattern that matched in the main Chi router
	routePattern := rctx.RoutePattern()
	if routePattern == "" {
		return nil, false
	}
	
	// O(1) lookup using method:pattern as key
	key := r.Method + ":" + routePattern
	if metadata, exists := APIMetadataMap[key]; exists {
		return &metadata, true
	}
	
	return nil, false
}

